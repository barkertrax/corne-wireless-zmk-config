#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "COPY";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp X>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "CUT";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp V>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "PASTE";
        };

        undo: undo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp Z>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "UNDO";
        };

        pswd: pswd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(T) &kp U &kp E &kp S &kp D &kp A &kp Y &kp LS(T) &kp H &kp U &kp R &kp S &kp D &kp A &kp Y &kp N1 &kp N7 &kp N0 &kp N9>;
            label = "PSWD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E      &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P      &kp BACKSPACE
&kp TAB     &kp A  &kp S  &kp D      &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI   &kp SINGLE_QUOTE
&kp LSHFT   &kp Z  &kp X  &kp C      &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp SLASH  &kp RIGHT_SHIFT
                          &kp LCTRL  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp LALT
            >;
        };

        symbols {
            bindings = <
&kp GRAVE  &kp N1                &kp N2                 &kp N3            &kp N4             &kp N5               &kp N6           &kp N7     &kp N8  &kp N9    &kp N0           &kp EQUAL
&kp AT     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp NON_US_HASH      &kp NON_US_BSLH  &kp SLASH  &trans  &kp HASH  &kp AMPERSAND    &kp MINUS
&kp LSHFT  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LESS_THAN     &kp GREATER_THAN   &kp DOUBLE_QUOTES    &kp TILDE2       &trans     &trans  &trans    &kp EXCLAMATION  &kp PIPE
                                                        &trans            &trans             &kp SPACE            &kp RET          &trans     &trans
            >;
        };

        functions {
            bindings = <
&kp F1     &kp F2  &kp F3  &kp F4     &kp F5  &kp F6       &kp F7   &kp F8          &kp F9          &kp F10          &kp F11   &kp F12
&trans     &trans  &trans  &trans     &trans  &pswd        &trans   &trans          &kp UP_ARROW    &trans           &kp HOME  &kp PAGE_UP
&kp LSHFT  &trans  &trans  &trans     &trans  &trans       &trans   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END   &kp PAGE_DOWN
                           &kp LCTRL  &trans  &kp SPACE    &kp RET  &trans          &kp LALT
            >;
        };

        control {
            bindings = <
&trans          &trans        &trans        &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans        &trans        &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                            &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        activate-control-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
